# Project Title

A comprehensive application utilizing Express, TypeScript, and dependency injection for efficient user management, authentication, and KYC (Know Your Customer) processes.

---

## Table of Contents

- [Overview](#overview)
- [Features](#features)
- [Technologies Used](#technologies-used)
- [Setup and Installation](#setup-and-installation)
- [Environment Variables](#environment-variables)
- [API Endpoints](#api-endpoints)
- [Project Structure](#project-structure)

---

## Overview

This project is a backend application built with Node.js, TypeScript, and Express. It provides robust features such as user authentication, role-based authorization, KYC submissions, and user management, with a focus on scalability, clean code, and dependency injection using `tsyringe`.

---

## Features

- **User Management:** Create, update, delete, and fetch user details.
- **Authentication:** Secure login and signup with password hashing.
- **Authorization:** Role-based access control for different endpoints.
- **KYC Management:** Submit and retrieve KYC details, including file uploads.
- **Error Handling:** Global error handling for consistent API responses.
- **Middleware:** Comprehensive middlewares for validation, role checks, and authorization.
- **Dependency Injection:** Simplified testing and maintenance using `tsyringe`.

---

## Technologies Used

- **Backend Framework:** Express.js
- **Language:** TypeScript
- **Database:** MongoDB
- **Dependency Injection:** `tsyringe`
- **File Uploads:** Multer
- **Environment Management:** `dotenv`
- **Validation:** `class-validator`

---

## Setup and Installation

1. Clone the repository:
   ```bash
   git clone <repository-url>
   ```

2. Navigate to the project directory:
   ```bash
   cd <project-directory>
   ```

3. Install dependencies:
   ```bash
   npm install
   ```

4. Start the development server:
   ```bash
   npm run dev
   ```

5. Use below credential to login as admin:
   ```bash
   {
    "email": "admin@test.com",
    "password": "test"
   }
   ```

---

## Environment Variables

Ensure you create a `.env` file in the root directory with the following variables:

```env
PORT=3000
MONGO_URI=<your-mongodb-uri>
JWT_SECRET=<your-jwt-secret>
```

---

## API Endpoints

### Auth

- **POST** `/api/v1/auth/login` - User login.
- **POST** `/api/v1/auth/signup` - User signup.
- **POST** `/api/v1/auth/reset` - Reset password.

### Users

- **POST** `/api/v1/users/create` - Create a new user (Admin only).
- **GET** `/api/v1/users/list` - Fetch all users (Admin only).
- **GET** `/api/v1/users/profile/:id` - Fetch user profile.
- **PATCH** `/api/v1/users/:id` - Update user details.
- **DELETE** `/api/v1/users/:id` - Delete a user.

### KYC

- **POST** `/api/v1/kyc/submit` - Submit KYC details.
- **GET** `/api/v1/kyc/status` - Retrieve KYC status.
- **PATCH** `/api/v1/kyc/status/:userId` - Update KYC status (Admin only).
- **GET** `/api/v1/kyc/submissions` - Get all KYC submissions (Admin only).
- **GET** `/api/v1/kyc/kpis` - Retrieve KYC KPIs (Admin only).

---

## Project Structure

```plaintext
src/
├── controllers/       # Route controllers for all modules
├── middleware/        # Custom middleware for validation, authorization, etc.
├── models/            # Database models
├── services/          # Business logic and services
├── dtos/              # Data Transfer Objects for validation
├── utils/             # Utility functions and classes
├── app.ts             # Main application file
```

---